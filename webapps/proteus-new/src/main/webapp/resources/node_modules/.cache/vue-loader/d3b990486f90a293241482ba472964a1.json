{"remainingRequest":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/Workings/GSOC-2018/drat/proteus-vue/proteus/src/components/testii.vue?vue&type=style&index=0&lang=css","dependencies":[{"path":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/src/components/testii.vue","mtime":1530246885112},{"path":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/node_modules/css-loader/index.js","mtime":1529100185366},{"path":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1521907989000},{"path":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/node_modules/cache-loader/dist/cjs.js","mtime":1529100185834},{"path":"/media/Workings/GSOC-2018/drat/proteus-vue/proteus/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsvg{\n     margin: 25px;\n\n}\npath{\n  fill: none;\n  stroke: #76BF8A;\n  stroke-width: 3px;\n}\n\narea{\n  fill: #76BF8A;\n}\nline{\nstroke: #4F7F5C;\nstroke-width: 1px;\nfill: none\n}\nselector{\n  stroke: #28402E;\n  stroke-width: 3px;\n  fill: none\n}\n",{"version":3,"sources":["testii.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"testii.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\n\n  <section class=\"testii\">\n    <div>\n      <svg :width=\"width\" :height=\"height\">\n        <g :style=\"{transform:`translate(${margin.left}px,${margin.top}px`}\">\n          <path class=\"area\" :d=\"paths.area\"/>\n          <path class=\"line\" :d=\"paths.line\"/>\n          <path class=\"selector\" :d=\"paths.selector\"/>\n        </g>\n      </svg>\n    </div>\n  </section>\n\n</template>\n\n<script lang=\"js\">\n  import * as d3 from 'd3';\n  import TWEEN from 'tween.js';\n\n  const props={\n    data:{\n      type:Array,\n      default : ()=>[],\n    },\n    margin:{\n      type:Object,\n      default: ()=>({\n        left:0,\n        right:0,\n        top:10,\n        bottom:10,\n\n      })\n    },\n    ceil:{\n      type:Number,\n      default :100,\n    }\n\n  }\n  export default  {\n    name: 'testii',\n    props,\n    mounted() {\n      window.addEventListener('resize',this.onResize);\n      this.onResize();\n     \n    },\n    beforeDestry(){\n      window.removeEventListener('resize',this.onResize);\n\n    },\n    watch:{\n      data : function dataChanged(newData,oldData) {\n        this.tweenData(newData,oldData);\n      },\n      width: function widthChanged(){\n         \n        this.initialize();\n        this.update();\n      },\n    },\n\n    data() {\n      return {\n          width :0,\n          height:0,\n          paths:{\n            area:'',\n            line:'',\n            selector:'',\n\n          },\n          lastHoverPoint:{},\n          scaled:{\n            x:null,\n            y:null,\n          },\n          animatedData:[[\"x\",1]],\n          points:[1,2,3,3],\n\n\n      }\n    },\n    methods: {\n      onResize(){\n        this.width = this.$el.offsetWidth;\n        this.height = this.$el.offsetHeight;\n      },\n      createArea: d3.area().x(d => d.x).y0(d=>d.max).y1(d=>d.y),\n      createLine: d3.line().x(d=>d.x).y(d=>d.y),\n      createValueSelector:d3.area().x(d=>d.x).y0(d=>d.max).y1(0),\n      initialize(){\n        this.scaled.x = d3.scaleLinear().range([0,this.padded.width]);\n        this.scaled.y = d3.scaleLinear().range([this.padded.height,0]);\n        d3.axisLeft().scale(this.scaled.x);\n        d3.axisBottom().scale(this.scaled.y);\n      },\n      tweenData(newData,oldData){\n        const vm = this;\n        function animate(time){\n          requestAnimationFrame(animate);\n          TWEEN.update(time);\n        }\n        new TWEEN.Tween(oldData)\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to(newData,500)\n        .onUpdate(function onUpdate(){\n          vm.animatedData = this;\n          vm.update();\n        })\n        .start();\n        animate();\n      },\n\n      update(){\n        this.scaled.x.domain(d3.extent(this.data,(d,i)=>i));\n        this.scaled.y.domain([0,this.ceil]);\n        this.points = [];\n        for(const [i,d] of this.animatedData.entries()){\n          this.points.push({\n            x:this.scaled.x(i),\n            y:this.scaled.y(d),\n            max:this.height,\n          });\n          this.$log.info(\"x\");\n        }\n        this.paths.area = this.createArea(this.points);\n        this.paths.line = this.createLine(this.points);\n        this.$log.info(this.points+\"h\");\n      },\n      mouseover({offsetX}){\n        if(this.points.length>0){\n          const x = offsetX - this.margin.left;\n          const closestPoint = this.getClosestPoint(x);\n          if(this.lastHoverPoint.index !== closestPoint.index){\n            const point = this.points[closestPoint.index];\n            this.paths.selector = this.createValueSelector([point]);\n            this.$emit('select',this.data[closestPoint.index]);\n            this.lastHoverPoint = closestPoint;\n          }\n        }\n      },\n      getClosestPoint(x){\n        return this.points\n        .map((point,index)=>({\n          x:point.x,\n          diff:Math.abs(point.x - x),\n          index,\n        }))\n        .reduce((memo,val) => (memo.diff < val.diff? memo:val));\n      }\n    },\n    computed: {\n        padded(){\n          const width = this.width- this.margin.left -this.margin.right;\n          const height = this.height- this.margin.top - this.margin.bottom;\n\n          return {width,height};\n        },\n    }\n}\n</script>\n\n<style >\n  svg{\n       margin: 25px;\n  \n  }\n  path{\n    fill: none;\n    stroke: #76BF8A;\n    stroke-width: 3px;\n  }\n\n  area{\n    fill: #76BF8A;\n  }\n  line{\n  stroke: #4F7F5C;\n  stroke-width: 1px;\n  fill: none\n  }\n  selector{\n    stroke: #28402E;\n    stroke-width: 3px;\n    fill: none\n  }\n</style>\n"]}]}